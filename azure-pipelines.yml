# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - master
pr:
  - master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  dockerImage: workerimage

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '12.x'
  displayName: 'Install Node.js'
- script: |
    yarn --ignore-engines
    yarn build
  displayName: 'yarn and yarn build'
- script: |
    yarn test
  displayName: 'Test'
- script: |
    echo "##vso[task.setvariable variable=dockerTag]$(date '+%Y%m%d%H%M%S')"
    echo Docker tag calculated $(dockerTag)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Calculating docker image tag'
- script: |
    npm install -g azure-functions-core-tools
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Install Azure functions core tools'
- task: CmdLine@2
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    script: |
      cd $(Build.SourcesDirectory)/packages/services
      func extensions install --javascript
      cd $(Build.SourcesDirectory)/packages/worker
      func extensions install --javascript
    workingDirectory: '$(Build.SourcesDirectory)'
    failOnStderr: true
  displayName: 'Install Azure Function extensions'
- task: CmdLine@2
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    script: |
      cd $(Build.SourcesDirectory)/packages/utils
      rm -rf node_modules/
      npm install --only=prod
      cd ../services
      rm -rf node_modules/
      npm install --only=prod
    workingDirectory: '$(Build.SourcesDirectory)'
  displayName: 'Install dependecies for utils and services functions'
- task: ArchiveFiles@2
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/packages/services'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true
  displayName: Create deployment zip file for service functions
- task: Docker@2
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: DockerACRConnection
- task: Docker@2
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Build worker image
  inputs:
    command: build
    repository: $(dockerImage)
    tags: $(dockerTag)
    Dockerfile: $(Build.SourcesDirectory)/packages/worker/Dockerfile
    buildContext: $(Build.SourcesDirectory)
- task: Docker@2
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Push worker image
  inputs:
    command: push
    containerRegistry: DockerACRConnection
    repository: $(dockerImage)
    tags: $(dockerTag)
- task: AzureFunctionApp@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    azureSubscription: 'webhint-staging'
    appType: 'functionAppLinux'
    appName: 'service-functions-staging'
    package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    runtimeStack: 'DOCKER|microsoft/azure-functions-node8:2.0'
    appSettings: '-APPINSIGHTS_INSTRUMENTATIONKEY $(APPINSIGHTS_INSTRUMENTATIONKEY) -AzureWebJobsStorage $(AzureWebJobsStorage) -DatabaseConnection $(DatabaseConnection) -QueueConnection $(QueueConnection) -FUNCTIONS_EXTENSION_VERSION $(FUNCTIONS_EXTENSION_VERSION) -FUNCTIONS_WORKER_RUNTIME $(FUNCTIONS_WORKER_RUNTIME) -WEBSITE_ENABLE_SYNC_UPDATE_SITE $(WEBSITE_ENABLE_SYNC_UPDATE_SITE) -WEBSITE_NODE_DEFAULT_VERSION $(WEBSITE_NODE_DEFAULT_VERSION) -WEBSITES_ENABLE_APP_SERVICE_STORAGE $(WEBSITES_ENABLE_APP_SERVICE_STORAGE) -WEBSITE_RUN_FROM_PACKAGE $(WEBSITE_RUN_FROM_PACKAGE)'
  displayName: Deploy service functions
- task: AzureFunctionAppContainer@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Deploy worker function
  inputs:
    azureSubscription: 'webhint-staging'
    appName: worker-functions-staging
    imageName: $(DOCKER_REPOSITORY)/$(dockerImage):$(dockerTag)
